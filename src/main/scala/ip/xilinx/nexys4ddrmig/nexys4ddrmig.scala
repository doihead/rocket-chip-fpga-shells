package sifive.fpgashells.ip.xilinx.nexys4ddrmig

import chisel3._
import chisel3.experimental.Analog
import freechips.rocketchip.util.ElaborationArtefacts
import org.chipsalliance.cde.config._

// Black Box

class Nexys4DDRMIGIODDR(depth : BigInt) extends Bundle {
  require((depth<=0x8000000L),"Nexys4DDRMIGIODDR supports upto 128 MB depth configuraton")
  val ddr2_addr             = Output(Bits(13.W))
  val ddr2_ba               = Output(Bits(3.W))
  val ddr2_ras_n            = Output(Bool())
  val ddr2_cas_n            = Output(Bool())
  val ddr2_we_n             = Output(Bool())
  val ddr2_ck_p             = Output(Bits(1.W))
  val ddr2_ck_n             = Output(Bits(1.W))
  val ddr2_cke              = Output(Bits(1.W))
  val ddr2_cs_n             = Output(Bits(1.W))
  val ddr2_dm               = Output(Bits(2.W))
  val ddr2_odt              = Output(Bits(1.W))

  val ddr2_dq               = Analog(16.W)
  val ddr2_dqs_n            = Analog(2.W)
  val ddr2_dqs_p            = Analog(2.W)
}

trait Nexys4DDRMIGIOClocksReset extends Bundle {
  //inputs
  //"NO_BUFFER" clock source (must be connected to IBUF outside of IP)
  val sys_clk_i             = Input(Bool())
  val clk_ref_i             = Input(Bool())
  //user interface signals
  val ui_clk                = Output(Clock())
  val ui_clk_sync_rst       = Output(Bool())
  val mmcm_locked           = Output(Bool())
  val aresetn               = Input(Bool())
  //misc
  val init_calib_complete   = Output(Bool())
  val sys_rst               = Input(Bool())
}

//scalastyle:off
//turn off linter: blackbox name must match verilog module
class Nexys4DDRmig(depth : BigInt)(implicit val p:Parameters) extends BlackBox
{
  require((depth<=0x8000000L),"Nexys4DDRmig supports upto 128 MB depth configuraton")

  val io = IO(new Nexys4DDRMIGIODDR(depth) with Nexys4DDRMIGIOClocksReset {
    // User interface signals
    val app_sr_req            = Input(Bool())
    val app_ref_req           = Input(Bool())
    val app_zq_req            = Input(Bool())
    val app_sr_active         = Output(Bool())
    val app_ref_ack           = Output(Bool())
    val app_zq_ack            = Output(Bool())
    //axi_s
    //slave interface write address ports
    val s_axi_awid            = Input(Bits(4.W))
    val s_axi_awaddr          = Input(Bits(if(depth<=0x40000000) 30.W else 32.W))
    val s_axi_awlen           = Input(Bits(8.W))
    val s_axi_awsize          = Input(Bits(3.W))
    val s_axi_awburst         = Input(Bits(2.W))
    val s_axi_awlock          = Input(Bits(1.W))
    val s_axi_awcache         = Input(Bits(4.W))
    val s_axi_awprot          = Input(Bits(3.W))
    val s_axi_awqos           = Input(Bits(4.W))
    val s_axi_awvalid         = Input(Bool())
    val s_axi_awready         = Output(Bool())
    //slave interface write data ports
    val s_axi_wdata           = Input(Bits(64.W))
    val s_axi_wstrb           = Input(Bits(8.W))
    val s_axi_wlast           = Input(Bool())
    val s_axi_wvalid          = Input(Bool())
    val s_axi_wready          = Output(Bool())
    //slave interface write response ports
    val s_axi_bready          = Input(Bool())
    val s_axi_bid             = Output(Bits(4.W))
    val s_axi_bresp           = Output(Bits(2.W))
    val s_axi_bvalid          = Output(Bool())
    //slave interface read address ports
    val s_axi_arid            = Input(Bits(4.W))
    val s_axi_araddr          = Input(Bits(if(depth<=0x40000000) 30.W else 32.W))
    val s_axi_arlen           = Input(Bits(8.W))
    val s_axi_arsize          = Input(Bits(3.W))
    val s_axi_arburst         = Input(Bits(2.W))
    val s_axi_arlock          = Input(Bits(1.W))
    val s_axi_arcache         = Input(Bits(4.W))
    val s_axi_arprot          = Input(Bits(3.W))
    val s_axi_arqos           = Input(Bits(4.W))
    val s_axi_arvalid         = Input(Bool())
    val s_axi_arready         = Output(Bool())
    //slave interface read data ports
    val s_axi_rready          = Input(Bool())
    val s_axi_rid             = Output(Bits(4.W))
    val s_axi_rdata           = Output(Bits(64.W))
    val s_axi_rresp           = Output(Bits(2.W))
    val s_axi_rlast           = Output(Bool())
    val s_axi_rvalid          = Output(Bool())
    //misc
    // val device_temp           = Output(Bits(12.W))
  })


  val migprj = """{<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
    <Project NoOfControllers="1">
    <!-- IMPORTANT: This is an internal file that has been generated by the MIG software. Any direct editing or changes made to this file may result in unpredictable behavior or data corruption. It is strongly advised that users do not edit the contents of this file. Re-run the MIG GUI with the required settings if any of the options provided below need to be altered. -->
      <ModuleName>mig_7series_0</ModuleName>
      <dci_inouts_inputs>1</dci_inouts_inputs>
      <dci_inputs>1</dci_inputs>
      <Debug_En>OFF</Debug_En>
      <DataDepth_En>1024</DataDepth_En>
      <LowPower_En>ON</LowPower_En>
      <XADC_En>Enabled</XADC_En>
      <TargetFPGA>xc7a100t-csg324/-1</TargetFPGA>
      <Version>4.2</Version>
      <SystemClock>No Buffer</SystemClock>
      <ReferenceClock>No Buffer</ReferenceClock>
      <SysResetPolarity>ACTIVE HIGH</SysResetPolarity>
      <BankSelectionFlag>FALSE</BankSelectionFlag>
      <InternalVref>1</InternalVref>
      <dci_hr_inouts_inputs>50 Ohms</dci_hr_inouts_inputs>
      <dci_cascade>0</dci_cascade>
      <Controller number="0">
        <MemoryDevice>DDR2_SDRAM/Components/MT47H64M16HR-25E</MemoryDevice>
        <TimePeriod>3333</TimePeriod>
        <VccAuxIO>1.8V</VccAuxIO>
        <PHYRatio>2:1</PHYRatio>
        <InputClkFreq>100.01</InputClkFreq>
        <UIExtraClocks>0</UIExtraClocks>
        <MMCM_VCO>1200</MMCM_VCO>
        <MMCMClkOut0> 1.000</MMCMClkOut0>
        <MMCMClkOut1>1</MMCMClkOut1>
        <MMCMClkOut2>1</MMCMClkOut2>
        <MMCMClkOut3>1</MMCMClkOut3>
        <MMCMClkOut4>1</MMCMClkOut4>
        <DataWidth>16</DataWidth>
        <DeepMemory>1</DeepMemory>
        <DataMask>1</DataMask>
        <ECC>Disabled</ECC>
        <Ordering>Normal</Ordering>
        <BankMachineCnt>4</BankMachineCnt>
        <CustomPart>FALSE</CustomPart>
        <NewPartName/>
        <RowAddress>13</RowAddress>
        <ColAddress>10</ColAddress>
        <BankAddress>3</BankAddress>
        <UserMemoryAddressMap>BANK_ROW_COLUMN</UserMemoryAddressMap>
        <PinSelection>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="M4" SLEW="" VCCAUX_IO="" name="ddr2_addr[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R2" SLEW="" VCCAUX_IO="" name="ddr2_addr[10]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="K5" SLEW="" VCCAUX_IO="" name="ddr2_addr[11]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="N6" SLEW="" VCCAUX_IO="" name="ddr2_addr[12]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="P4" SLEW="" VCCAUX_IO="" name="ddr2_addr[1]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="M6" SLEW="" VCCAUX_IO="" name="ddr2_addr[2]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="T1" SLEW="" VCCAUX_IO="" name="ddr2_addr[3]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="L3" SLEW="" VCCAUX_IO="" name="ddr2_addr[4]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="P5" SLEW="" VCCAUX_IO="" name="ddr2_addr[5]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="M2" SLEW="" VCCAUX_IO="" name="ddr2_addr[6]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="N1" SLEW="" VCCAUX_IO="" name="ddr2_addr[7]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="L4" SLEW="" VCCAUX_IO="" name="ddr2_addr[8]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="N5" SLEW="" VCCAUX_IO="" name="ddr2_addr[9]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="P2" SLEW="" VCCAUX_IO="" name="ddr2_ba[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="P3" SLEW="" VCCAUX_IO="" name="ddr2_ba[1]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R1" SLEW="" VCCAUX_IO="" name="ddr2_ba[2]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="L1" SLEW="" VCCAUX_IO="" name="ddr2_cas_n"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="L5" SLEW="" VCCAUX_IO="" name="ddr2_ck_n[0]"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="L6" SLEW="" VCCAUX_IO="" name="ddr2_ck_p[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="M1" SLEW="" VCCAUX_IO="" name="ddr2_cke[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="K6" SLEW="" VCCAUX_IO="" name="ddr2_cs_n[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="T6" SLEW="" VCCAUX_IO="" name="ddr2_dm[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="U1" SLEW="" VCCAUX_IO="" name="ddr2_dm[1]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R7" SLEW="" VCCAUX_IO="" name="ddr2_dq[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="V5" SLEW="" VCCAUX_IO="" name="ddr2_dq[10]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="U4" SLEW="" VCCAUX_IO="" name="ddr2_dq[11]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="V4" SLEW="" VCCAUX_IO="" name="ddr2_dq[12]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="T4" SLEW="" VCCAUX_IO="" name="ddr2_dq[13]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="V1" SLEW="" VCCAUX_IO="" name="ddr2_dq[14]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="T3" SLEW="" VCCAUX_IO="" name="ddr2_dq[15]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="V6" SLEW="" VCCAUX_IO="" name="ddr2_dq[1]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R8" SLEW="" VCCAUX_IO="" name="ddr2_dq[2]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="U7" SLEW="" VCCAUX_IO="" name="ddr2_dq[3]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="V7" SLEW="" VCCAUX_IO="" name="ddr2_dq[4]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R6" SLEW="" VCCAUX_IO="" name="ddr2_dq[5]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="U6" SLEW="" VCCAUX_IO="" name="ddr2_dq[6]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="R5" SLEW="" VCCAUX_IO="" name="ddr2_dq[7]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="T5" SLEW="" VCCAUX_IO="" name="ddr2_dq[8]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="U3" SLEW="" VCCAUX_IO="" name="ddr2_dq[9]"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="V9" SLEW="" VCCAUX_IO="" name="ddr2_dqs_n[0]"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="V2" SLEW="" VCCAUX_IO="" name="ddr2_dqs_n[1]"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="U9" SLEW="" VCCAUX_IO="" name="ddr2_dqs_p[0]"/>
          <Pin IN_TERM="" IOSTANDARD="DIFF_SSTL18_II" PADName="U2" SLEW="" VCCAUX_IO="" name="ddr2_dqs_p[1]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="M3" SLEW="" VCCAUX_IO="" name="ddr2_odt[0]"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="N4" SLEW="" VCCAUX_IO="" name="ddr2_ras_n"/>
          <Pin IN_TERM="" IOSTANDARD="SSTL18_II" PADName="N2" SLEW="" VCCAUX_IO="" name="ddr2_we_n"/>
        </PinSelection>
        <System_Control>
          <Pin Bank="Select Bank" PADName="No connect" name="sys_rst"/>
          <Pin Bank="Select Bank" PADName="No connect" name="init_calib_complete"/>
          <Pin Bank="Select Bank" PADName="No connect" name="tg_compare_error"/>
        </System_Control>
        <TimingParameters>
          <Parameters tfaw="45" tras="40" trcd="15" trefi="7.8" trfc="127.5" trp="12.5" trrd="10" trtp="7.5" twtr="7.5"/>
        </TimingParameters>
        <mrBurstLength name="Burst Length">8</mrBurstLength>
        <mrBurstType name="Burst Type">Sequential</mrBurstType>
        <mrCasLatency name="CAS Latency">5</mrCasLatency>
        <mrMode name="Mode">Normal</mrMode>
        <mrDllReset name="DLL Reset">No</mrDllReset>
        <mrPdMode name="PD Mode">Fast exit</mrPdMode>
        <mrWriteRecovery name="Write Recovery">5</mrWriteRecovery>
        <emrDllEnable name="DLL Enable">Enable-Normal</emrDllEnable>
        <emrOutputDriveStrength name="Output Drive Strength">Fullstrength</emrOutputDriveStrength>
        <emrCSSelection name="Controller Chip Select Pin">Enable</emrCSSelection>
        <emrCKSelection name="Memory Clock Selection">1</emrCKSelection>
        <emrRTT name="RTT (nominal) - ODT">50ohms</emrRTT>
        <emrPosted name="Additive Latency (AL)">0</emrPosted>
        <emrOCD name="OCD Operation">OCD Exit</emrOCD>
        <emrDQS name="DQS# Enable">Enable</emrDQS>
        <emrRDQS name="RDQS Enable">Disable</emrRDQS>
        <emrOutputs name="Outputs">Enable</emrOutputs>
        <PortInterface>AXI</PortInterface>
        <AXIParameters>
          <C0_C_RD_WR_ARB_ALGORITHM>RD_PRI_REG</C0_C_RD_WR_ARB_ALGORITHM>
          <C0_S_AXI_ADDR_WIDTH>27</C0_S_AXI_ADDR_WIDTH>
          <C0_S_AXI_DATA_WIDTH>64</C0_S_AXI_DATA_WIDTH>
          <C0_S_AXI_ID_WIDTH>4</C0_S_AXI_ID_WIDTH>
          <C0_S_AXI_SUPPORTS_NARROW_BURST>0</C0_S_AXI_SUPPORTS_NARROW_BURST>
        </AXIParameters>
      </Controller>
</Project> } """




  val migprjname = """{/Nexys4DDRmig.prj}"""
  val modulename = """Nexys4DDRmig"""

  ElaborationArtefacts.add(
    modulename++".vivado.tcl",
    """set migprj """++migprj++"""
   set migprjfile """++migprjname++"""
   set migprjfilepath $ipdir$migprjfile
   set fp [open $migprjfilepath w+]
   puts $fp $migprj
   close $fp
   create_ip -vendor xilinx.com -library ip -name mig_7series -module_name """ ++ modulename ++ """ -dir $ipdir -force
   set_property CONFIG.XML_INPUT_FILE $migprjfilepath [get_ips """ ++ modulename ++ """] """
  )


}

/*
   Copyright 2016 SiFive, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
